
Week1   - spring, spring boot, jpa, spring data jpa 

week2  - transaction, caching, querydsl, REST, security, devops, docker

Week3   - Microservices, AWS

Week4   - frontend - angular, react 


    Spring 
        - core, mvc, rest, data, cloud, security, boot  
        - you will end up with 1 app (REST application)

    Microservices 
        - config server, api gateway, service discovery, ....

    Cloud / DevOps / Docker 
        - EC2 - deploy application  
        - automate the deployment using CI/CD 
        - version controlled 
        - Docker 

    - Frontend 
        - angular 
        - react


how?

Session1    - raise a new topic, discussions, demonstrations 

Session2    - hands-on, continue discussion, demonstrations 

Session3    - self study, refer to the given docs, articles, books, 

Session4    - assignments / hands-ons / practice



Environment Setup 
--------------------

    1. your own personal laptop                          2. Virtual Machine 


    a. openjdk 11
    b. eclipse / STS editor 
        - install required plugins 
    c. docker 
    d. nodejs 
    e. mysql community server / any database of your choice 
    f. vs code editor 
        - install required plugins 
    g. mongodb community server 



    Language                    library/packages                    Framework 

    Java                        standard libraries                  Spring 
                                other libraries 

    c# 

    vb 

    javascript 

    python


        |                               |                               |
    provide programming         simplify the tasks              standarize the process
    capabilities 



    build tools / dependency management tools 
        - maven / gradle 

    Testing tools 


    Tool 
        - hibernate



    Spring 
    ------------

        - core container 
            - core 
            - beans 
            - context 
            - SpEL

        - web 
            - web       - provides function such as creating web applications, rest, web services etc.
            - web-mvc   - contains spring-mvc implementations for webapplications 
            - web-socket
            - web-portlet etc. 

        - data access 
            - 
        - cloud 
        - security
        - ...



        - IOC 
            - delegates the responsibility of managing objects to something called 'Container'
            - transfer the control of objects to a container

        - Container 

            - ApplicationContext    <- interface which represents IoC container 
                - the implementations of this interface is responsible for instantiating objevts / manage the life cycle of objects 
                - ClassPathXmlApplicationContext,
                - AnnotationConfigApplicationContext, 
                - AnnotationConfigWebApplicationContext,


            - Dependency Injections 

        - Spring Beans 
            - "Bean" is an object which is managed by spring IoC Container 


        - Bean Definition / Bean Configuration 

            - Ways to define the beans

            a. xml 

                   <beans xmlns="http://www.springframework.org/schema/beans"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="
                        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

                    <!-- bean definitions here -->
                    
                    <bean id="product" class="demo1.bo.Product"></bean>
                    
                    <bean id="productService" class="demo1.services.ProductService"></bean>
                    
                    <bean id="productDAO" class="demo1.dao.ProductDAO"></bean>

                </beans>

            b. java 

            c. annotations 



Auto Configurations
-------------------------
    - spring boot auto configuration will automatically define beans 
            - based on presence / absence ....
                - of some properties in application.properties file 
                - of some beans 
                - of some dependencies in class path 
                - ...



Data access 
-----------------\  \
        - jdbc 
        - jdbc template 
        - orm tools 



    ORM Tools 
    -----------\    
        - object relational mapping 
        - in java data is represented in the form of "object" 
        - in rbdms systems data is represented in the form of tables 

        - hibernate 
        - toplink
        - ibatis 

        - map java object with relational table 

    
    JPA - java persistence api 
    ----------
        - specification / standard that every orm tool has to implement 

    JPA Providers
    ------------------
        - Hibernate JPA 
        - EclipseLink
        - Mybatis
        - Openjpa

    Spring Data JPA 
    ----------------
        JPA         - specification

        Hibernate   - jpa provider

        Spring Data JPA - offers repository pattern 



    Entity 
    ----------
        - Entity is an object which is managed by the persistence provider 
        - entities can be concrete as well as abstract 
        - entities also support relationships, inheritances 


            @Entity
            public class Employee {

                    @Id 
                    private int id;

                    public Employee(){

                    }
            }

    EntityManager 
    ------------------
        - used to perform all the db operations / CRUD operations 

            EntityManagerFactory factory = Persistence.createEntityManagerFactory("puname");
            EntityManager em = factory.createEntityManager();


    Persistence Unit 
    ------------------
        - named set of entities to be persisted 

            <persistence-unit name="puname">
                <provider></provider>
                <class></class>
                ....

                <properties>
                    //db properties 
                </properties>
            </persistence-unit>

    Managed entities
    -----------------
        - when an entitymanager obtains a ref to an entity, it is said to be managed 
        - A managed entity is a representation of a database table row
        - when an entity is managed, we can carry out persistence operations and the EM will automatically 
            synchronize the state of the entity with the database 

    Default Mapping 
    ---------------------


    Custom Mapping 
    -------------------


    Relationships and inheritance
    ---------------------------------


    Cascading events 


    Fetch policy 


    Querying entities 
        - create custom queries using JPQL statement 

        - create custom queries using native sql statement 

        - named queries

        - Query generation methods 

        - Criteria API 

        - QueryDSL 



    Spring Data JPA 
    ------------------
        - repository pattern 